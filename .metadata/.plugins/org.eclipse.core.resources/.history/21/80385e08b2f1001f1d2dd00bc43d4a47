package com.hotel.api.service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.hotel.api.entity.Reservation;
import com.hotel.api.entity.Room;
import com.hotel.api.entity.User;
import com.hotel.api.entity.enums.ReservationStatus;
import com.hotel.api.entity.enums.ReservationType;
import com.hotel.api.entity.enums.RoomTypes;
import com.hotel.api.exceptionHandling.customExceptions.ReservationNotFoundException;
import com.hotel.api.exceptionHandling.customExceptions.ReservationStatusErrorException;
import com.hotel.api.exceptionHandling.customExceptions.UnavailableRoomException;
import com.hotel.api.repository.ReservationRepository;
import com.hotel.api.repository.RoleRepository;
import com.hotel.api.repository.RoomRepository;
import com.hotel.api.repository.UserRepository;
import com.hotel.api.service.DTOs.Input.ChangePasswordRequestForm;
import com.hotel.api.service.DTOs.Input.EditBookedDateForm;
import com.hotel.api.service.DTOs.Input.ExtendStayForm;
import com.hotel.api.service.DTOs.Input.ManualReservationForm;
import com.hotel.api.service.DTOs.Input.ReservationIdForm;
import com.hotel.api.service.DTOs.Input.StandardReservationForm;
import com.hotel.api.service.DTOs.Input.UserRoleForm;
import com.hotel.api.service.DTOs.Input.ReservationStatusForm;
import com.hotel.api.service.DTOs.Input.ReservationTypeForm;
import com.hotel.api.service.DTOs.Input.RoomAddForm;
import com.hotel.api.service.DTOs.Input.RoomEditForm;
import com.hotel.api.service.DTOs.Input.RoomIdForm;
import com.hotel.api.service.DTOs.Input.UsernameOrEmailAndReservationStatusForm;
import com.hotel.api.service.DTOs.Input.UsernameOrEmailAndReservationTypeForm;
import com.hotel.api.service.DTOs.Input.UsernameOrEmailForm;
import com.hotel.api.service.DTOs.Output.ReservationRecord;
import com.hotel.api.service.DTOs.Output.RoomChoice;
import com.hotel.api.service.DTOs.Output.RoomRecord;
import com.hotel.api.service.DTOs.Output.SimpleUserInfo;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class HotelService {
	
	private final RoomRepository roomRepository;
	private final RoleRepository roleRepository;
	private final ReservationRepository reservationRepository;
	private final UserRepository userRepository;
	private final PasswordEncoder passwordEncoder;

	//Universal Methods////////////////////////////////////////////////////////////////////////////////////////////
	
	public List<ReservationRecord> getAllReservationsByUsernameOrEmail(UsernameOrEmailForm usernameOrEmailForm){
		return userRepository.SimpleFindByUsernameOrEmail(usernameOrEmailForm.usernameOrEmail()).getReservations().
				stream().map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	public List<ReservationRecord> getAllReservationsByUsernameOrEmailAndStatus(UsernameOrEmailAndReservationStatusForm usernameOrEmailAndReservationStatusForm){
		return userRepository.SimpleFindByUsernameOrEmail(usernameOrEmailAndReservationStatusForm.usernameOrEmail()).getReservations().
				stream().filter((reservation) -> {return reservation.getReservationStatus() == usernameOrEmailAndReservationStatusForm.reservationStatus();}).
				map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	public List<ReservationRecord> getAllReservationsByUsernameOrEmailAndType(UsernameOrEmailAndReservationTypeForm usernameOrEmailAndReservationTypeForm){
		return userRepository.SimpleFindByUsernameOrEmail(usernameOrEmailAndReservationTypeForm.usernameOrEmail()).getReservations().
				stream().filter((reservation) -> {return reservation.getReservationType() == usernameOrEmailAndReservationTypeForm.reservationType();}).
				map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	
	//User Methods/////////////////////////////////////////////////////////////////////////////////////////////////
	
	public String standardReservation(StandardReservationForm standardReservationForm) {
		Room availableRoom = findAvailableRoom(standardReservationForm.roomType());	
		if(availableRoom == null) {
			throw new UnavailableRoomException("Sorry, no rooms of " + standardReservationForm.roomType() + " type are available at the moment.");
		}
		
		User reservationMaker = userRepository.findByUsernameOrEmail(standardReservationForm.usernameOrEmail()).orElse(null); 
		if(reservationMaker == null) {
			throw new UsernameNotFoundException("User not found.");
		}
		
		Reservation reservation = new Reservation(reservationMaker, LocalDateTime.now(),
				standardReservationForm.bookedDate(), standardReservationForm.nights(), "09-" + standardReservationForm.contactNumber(), availableRoom, ReservationType.Standard);
		availableRoom.setReserved(true);
		roomRepository.save(availableRoom);
		reservationRepository.save(reservation);
		userRepository.save(reservationMaker);
		return "Reservation placed successfully.";
	}
	
	public String manualReservation(ManualReservationForm manualReservationForm) {
		Room chosenRoom = roomRepository.getRoomByNumber(manualReservationForm.roomNumber());
		if(chosenRoom == null) {
			throw new UnavailableRoomException("room not found");
		}
		
		if(chosenRoom.getReserved() == true) {
			throw new UnavailableRoomException("room " + manualReservationForm.roomNumber() + " is not available");
		}
		
		User reservationMaker = userRepository.findByUsernameOrEmail(manualReservationForm.usernameOrEmail()).orElse(null); 
		if(reservationMaker == null) {
			throw new UsernameNotFoundException("User not found.");
		}
		
		Reservation reservation = new Reservation(reservationMaker, LocalDateTime.now(), 
				manualReservationForm.bookedDate(), manualReservationForm.nights(), manualReservationForm.contactNumber(), chosenRoom, ReservationType.Manual);
		chosenRoom.setReserved(true);
		roomRepository.save(chosenRoom);
		reservationRepository.save(reservation);
		userRepository.save(reservationMaker);
		return "Reservation placed successfully.";
	}
	
	public SimpleUserInfo getUserInfo(UsernameOrEmailForm usernameOrEmailForm) {
		User foundUser = userRepository.findByUsernameOrEmail(usernameOrEmailForm.usernameOrEmail()).orElse(null);
		if(foundUser == null) {
			throw new UsernameNotFoundException("User not found.");
		}
		return returnSimpleUserInfo(foundUser);
	}
	
	@Transactional
	public String changePassword(ChangePasswordRequestForm changePasswordRequestForm) {
		User user = userRepository.findByUsernameOrEmail(changePasswordRequestForm.usernameOrEmail()).orElse(null);
		if(user == null) {
			throw new BadCredentialsException("user not found.");
		}
		if(!passwordEncoder.matches(changePasswordRequestForm.oldPassword(), user.getPassword())) {
			throw new BadCredentialsException("old password is incorrect.");
		}
		user.setPassword(passwordEncoder.encode(changePasswordRequestForm.newPassword()));
		userRepository.save(user);
		return "password changed successfully.";
	}
	
	public List<RoomChoice> initStandardReservationPage(){
		return List.of(
				new RoomChoice(RoomTypes.Standard, 1, 50.00, "Standard.jpg"),
				new RoomChoice(RoomTypes.Double, 1, 70.00, "Double.jpg"),
				new RoomChoice(RoomTypes.Twin, 2, 70.00, "Twin.jpg"),
				new RoomChoice(RoomTypes.Family, 3, 90.00, "Family.jpg"),
				new RoomChoice(RoomTypes.Queen, 1, 120.00, "Queen.jpg"),
				new RoomChoice(RoomTypes.King, 1, 140.00, "King.jpg"),
				new RoomChoice(RoomTypes.Suite, 2, 200.00, "Suite.jpg"),
				new RoomChoice(RoomTypes.Penthouse, 3, 250.00, "Penthouse.jpg"),
				new RoomChoice(RoomTypes.Villa, 4, 400.00, "Villa.jpg")
				);
	}
	
	//Administrator Methods/////////////////////////////////////////////////////////////////////////////////////////////////
	
	public List<SimpleUserInfo> getAllUsers(){
		return userRepository.findAll().stream().map(user -> {return returnSimpleUserInfo(user);}).collect(Collectors.toList());
	}
	
	public List<SimpleUserInfo> getUsersByRole(UserRoleForm userRoleForm){
		return roleRepository.findUsersByRole(userRoleForm.roleName()).stream().map(user -> {return returnSimpleUserInfo(user);}).collect(Collectors.toList());
	}
	
	public List<RoomRecord> getAllRooms(){
		return roomRepository.findAll().stream().map((room) -> {return returnRoomRecord(room);}).collect(Collectors.toList());
	}
	
	public RoomRecord getRoomById(RoomIdForm roomIdForm) {
		Room foundRoom = roomRepository.findById(roomIdForm.id()).orElse(null);
		if(foundRoom == null) {
			throw new UnavailableRoomException("room not found.");
		}
		return returnRoomRecord(foundRoom);
	}
	
	public String addNewRoom(RoomAddForm roomAddForm) {
		Room newRoom = new Room(roomAddForm.number(), roomAddForm.type(), roomAddForm.image());
		roomRepository.save(newRoom);
		return "success";
	}
	
	public String editRoom(RoomEditForm roomEditForm) {
		Room roomToEdit = roomRepository.findById(roomEditForm.id()).orElse(null);
		if(roomToEdit == null) {
			throw new UnavailableRoomException("room not found.");
		}
		roomToEdit.setNumber(roomEditForm.number());
		roomToEdit.setType(roomEditForm.type());
		roomToEdit.setBeds(roomEditForm.beds());
		roomToEdit.setPrice(roomEditForm.price());
		roomToEdit.setImage(roomEditForm.image());
		roomRepository.save(roomToEdit);
		return "success";
	}
	
	public List<ReservationRecord> getAllReservations(){
		return reservationRepository.findAll().stream().map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	public List<ReservationRecord> getAllReservationsByStatus(ReservationStatusForm reservationStatusForm){
		return reservationRepository.findAllByStatus(reservationStatusForm.reservationStatus()).stream().map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	public List<ReservationRecord> getAllReservationsByType(ReservationTypeForm reservationTypeForm){
		return reservationRepository.findAllByType(reservationTypeForm.reservationType()).stream().map((reservation) -> {return returnReservationRecord(reservation);}).collect(Collectors.toList());
	}
	
	public String checkIn(ReservationIdForm reservationIdForm) {
		Reservation checkInReservation = reservationRepository.findById(reservationIdForm.id()).orElse(null);
		if(checkInReservation == null) {
			throw new ReservationNotFoundException("reservation not found.");
		}
		
		if(checkInReservation.getReservationStatus() == ReservationStatus.Awaiting) {
			checkInReservation.setReservationStatus(ReservationStatus.Checked_In);
			checkInReservation.setCheckInTime(LocalDateTime.now());
			reservationRepository.save(checkInReservation);
			
			if(checkInReservation.getReservationStatus() != ReservationStatus.Checked_In) {
				checkInReservation.setCheckInTime(null);
				reservationRepository.save(checkInReservation);
				throw new ReservationStatusErrorException("something went wrong. please contact the developer.");
			}
			
			return "successfully checked in user: " + checkInReservation.getUsername() + ".";
		}
		else {
			throw new ReservationStatusErrorException("inappropriate reservation status.");
		}
	}
	
	
	public String checkOut(ReservationIdForm reservationIdForm) {
		Reservation checkOutReservation = reservationRepository.findById(reservationIdForm.id()).orElse(null);
		if(checkOutReservation == null) {
			throw new ReservationNotFoundException("reservation not found.");
		}
		
		if(checkOutReservation.getReservationStatus() == ReservationStatus.Checked_In) {
			Room checkOutRoom = checkOutReservation.getRoom();
			checkOutReservation.setReservationStatus(ReservationStatus.Checked_Out);
			checkOutReservation.setCheckOutTime(LocalDateTime.now());
			checkOutRoom.setReserved(false);
			roomRepository.save(checkOutRoom);
			reservationRepository.save(checkOutReservation);
			
			if(checkOutReservation.getReservationStatus() != ReservationStatus.Checked_Out) {
				checkOutRoom.setReserved(true);
				checkOutReservation.setCheckOutTime(null);
				roomRepository.save(checkOutRoom);
				reservationRepository.save(checkOutReservation);
				throw new ReservationStatusErrorException("something went wrong. please contact the developer.");
			}
			return "successfully checked out user: " + checkOutReservation.getUsername() + ".";
		}
		else {
			throw new ReservationStatusErrorException("inappropriate reservation status.");
		}
	}
	
	
	public String cancel(ReservationIdForm reservationIdForm) {
		Reservation cancelReservation = reservationRepository.findById(reservationIdForm.id()).orElse(null);
		if(cancelReservation == null) {
			throw new ReservationNotFoundException("reservation not found.");
		}
		
		if(cancelReservation.getReservationStatus() == ReservationStatus.Awaiting) {
			Room cancelRoom = cancelReservation.getRoom();
			cancelReservation.setReservationStatus(ReservationStatus.Cancelled);
			cancelReservation.setCancelTime(LocalDateTime.now());
			cancelRoom.setReserved(false);
			roomRepository.save(cancelRoom);
			reservationRepository.save(cancelReservation);
			
			if(cancelReservation.getReservationStatus() != ReservationStatus.Cancelled) {
				cancelRoom.setReserved(true);
				roomRepository.save(cancelRoom);
				reservationRepository.save(cancelReservation);
				throw new ReservationStatusErrorException("something went wrong. please contact the developer.");
			}
			return "successfully cancelled the reservation for user: " + cancelReservation.getUsername() + ".";
		}
		else {
			throw new ReservationStatusErrorException("inappropriate reservation status.");
		}
	}
	
	
	public String extendStay(ExtendStayForm extendStayForm) {
		Reservation extendReservation = reservationRepository.findById(extendStayForm.reservationId()).orElse(null);
		if(extendReservation == null) {
			throw new ReservationNotFoundException("reservation not found.");
		}
		
		if(extendReservation.getReservationStatus() == ReservationStatus.Awaiting || extendReservation.getReservationStatus() == ReservationStatus.Checked_In) {
			extendReservation.addNights(extendStayForm.nights());
			reservationRepository.save(extendReservation);
			return "nights extended to " + extendReservation.getNights() + " for user: " + extendReservation.getUsername() + ".";
		}
		else {
			throw new ReservationStatusErrorException("inappropriate reservation status.");
		}
	}
	
	public String editBookedDate(EditBookedDateForm editBookedDateForm) {
		Reservation editReservation = reservationRepository.findById(editBookedDateForm.reservationId()).orElse(null);
		if(editReservation == null) {
			throw new ReservationNotFoundException("reservation not found.");
		}
		
		if(editReservation.getReservationStatus() == ReservationStatus.Awaiting) {
			editReservation.setBookedDate(editBookedDateForm.bookedDate());
			reservationRepository.save(editReservation);
			return "Booked date changed to " + editReservation.getBookedDate() + " for user: " + editReservation.getUsername() + ".";
		}
		else {
			throw new ReservationStatusErrorException("inappropriate reservation status.");
		}
	}
	
	//Utilities/////////////////////////////////////////////////////////////////////////////////////////////////////
	
	private Room findAvailableRoom(RoomTypes roomType) {
		List<Room> rooms = roomRepository.getRoomsByType(roomType);
		for(int i = 0; i < rooms.size(); i ++) {
			if(rooms.get(i).getReserved() == false) {
				return rooms.get(i);
			}
		}
		return null;
	} 

	private RoomRecord returnRoomRecord(Room room) {
		return new RoomRecord(room.getId(), room.getNumber(), room.getType(), room.getBeds(), room.getPrice(), room.getReserved(), room.getImage());
	}
	
	private ReservationRecord returnReservationRecord(Reservation reservation) {
		return new ReservationRecord(reservation.getId(), reservation.getUsername(), reservation.getUserEmail(), reservation.getUserRank(), reservation.getReservationTime(),
				reservation.getBookedDate(), reservation.getNights(), reservation.getContactNumber(), reservation.getRoomNumber(), reservation.getRoomType(),
				reservation.getReservationFee(),reservation.getTotal(), reservation.getReservationType(), reservation.getReservationStatus(), reservation.getCheckInTime(),
				reservation.getCheckOutTime(), reservation.getCancelTime());
	}
	
	private SimpleUserInfo returnSimpleUserInfo(User user) {
		return new SimpleUserInfo(user.getUsername(), user.getEmail(), user.getRank());
	}
}
