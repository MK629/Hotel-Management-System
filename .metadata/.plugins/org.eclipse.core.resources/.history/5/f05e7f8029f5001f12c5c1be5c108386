package com.hotel.api.entity;

import java.time.LocalDate;
import java.time.LocalDateTime;

import com.hotel.api.entity.enums.ReservationStatus;
import com.hotel.api.entity.enums.ReservationType;
import com.hotel.api.entity.enums.RoomType;
import com.hotel.api.entity.enums.UserRank;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.Transient;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Entity
@Getter
@Setter
@NoArgsConstructor
@ToString
public class Reservation {
	
	@Id
	@Column(nullable = false)
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	private Long id;
	
	@ManyToOne(cascade = CascadeType.PERSIST)
	@JoinColumn(name = "user_id")
	private User user;
	
	@Column(nullable = false)
	private String username;
	
	@Column(nullable = false)
	private String userEmail;
	
	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private UserRank userRank;
	
	@Column(nullable = false)
	private LocalDateTime reservationDateTime;
	
	@Column(nullable = false)
	private LocalDate bookedDate;
	
	@Column(nullable = false)
	private Integer nights;
	
	@Column(nullable = false)
	private LocalDate estimatedCheckoutDate;
	
	@Column(nullable = false)
	private String contactNumber;
	
	@ManyToOne(cascade = CascadeType.PERSIST)
	@JoinColumn(name = "room_id")
	private Room room;
	
	@Column(nullable = false)
	private String roomNumber;
	
	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private RoomType roomType;
	
	@Column(nullable = false)
	private Double reservationFee;
	
	@Column(nullable = false)
	private Double total;
	
	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private ReservationType reservationType;
	
	@Column(nullable = false)
	@Enumerated(EnumType.STRING)
	private ReservationStatus reservationStatus;
	
	@Column(nullable = true)
	private LocalDateTime checkInDateTime;
	
	@Column(nullable = true)
	private LocalDateTime checkOutDateTime;
	
	@Column(nullable = true)
	private LocalDateTime cancelDateTime;
	
	@Column(nullable = false, columnDefinition = "TINYINT(1)")
	private Boolean extendedStay;
	
	@Transient //Hidden Variable
	private Double rawTotal;
	
	@Transient //Hidden Variable
	private Integer bookingDateEdited;
	
	public Reservation(User user, LocalDateTime reservationTime, LocalDate bookedDate,
			int nights, String contactNumber, Room room, ReservationType reservationType) {
		user.recordReservation(this);
		this.user = user;
		this.username = user.getUsername();
		this.userEmail = user.getEmail();
		this.userRank = user.getRank();
		this.reservationDateTime = reservationTime;
		this.bookedDate = bookedDate;
		this.nights = nights;
		this.estimatedCheckoutDate = this.bookedDate.plusDays(this.nights);
		this.contactNumber = contactNumber;
		this.room = room;
		this.roomNumber = room.getNumber();
		this.roomType = room.getType();
		this.reservationType = reservationType; 
		this.reservationStatus = ReservationStatus.Awaiting;
		this.reservationFee = chargeReservationFee(reservationType);
		this.rawTotal = this.reservationFee + (room.getPrice() * nights); 
		this.total = userRankDiscountTotal(this.userRank, this.rawTotal);
		
		this.extendedStay = false;
	}
	
	private Double chargeReservationFee(ReservationType type) {
		switch(type) {
		case Standard:{
			return 50.00;
		}
		case Manual:{
			return 100.00;
		}
		default: return 50.00;
		}
	}
	
	private Double userRankDiscountTotal(UserRank rank, Double total) {
		switch(rank) {
		case Bronze: return total;
		case Silver: return total * 0.9;
		case Gold: return total * 0.8;
		case Platinum: return total * 0.6;
		default: return total;
		}
	}
	
	public void addNights(Integer nights) {
		this.nights += nights;
		this.estimatedCheckoutDate = this.bookedDate.plusDays(this.nights);
		this.rawTotal = this.reservationFee + (this.room.getPrice() * this.nights);
		this.total = userRankDiscountTotal(this.userRank, rawTotal);
	}
}
